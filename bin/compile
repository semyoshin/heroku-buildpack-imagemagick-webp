#!/bin/sh

BUILD_DIR=$1
CACHE_DIR=$2

VENDOR_DIR="$BUILD_DIR/vendor"
INSTALL_DIR="$VENDOR_DIR/imagemagick-webp"
CACHE_FILE="$CACHE_DIR/imagemagick-webp.tar.xz"

mkdir -p $CACHE_DIR
mkdir -p $VENDOR_DIR

if [ ! -f $CACHE_FILE ]; then

  cd $BUILD_DIR

  # install nasm

  NASM_VERSION="2.13.03"
  NASM_FILE="nasm-$NASM_VERSION.tar.gz"
  NASM_DIR="nasm-$NASM_VERSION"
  NASM_URL="http://www.nasm.us/pub/nasm/releasebuilds/$NASM_VERSION/$NASM_FILE"

  echo "-----> Downloading nasm from $NASM_URL"
  curl -L --silent $NASM_URL | tar xz

  echo "-----> Building nasm"
  cd $NASM_DIR
  ./configure --prefix=$INSTALL_DIR
  make && make install
  cd ..
  rm -rf $NASM_DIR

  # install jpegturbo

  JPEGTURBO_VERSION="1.5.3"
  JPEGTURBO_FILE="libjpeg-turbo-$JPEGTURBO_VERSION.tar.gz"
  JPEGTURBO_DIR="libjpeg-turbo-$JPEGTURBO_VERSION"
  JPEGTURBO_URL="http://sourceforge.net/projects/libjpeg-turbo/files/$JPEGTURBO_VERSION/$JPEGTURBO_FILE/download"

  echo "-----> Downloading jpegturbo from $JPEGTURBO_URL"
  curl -L --silent $JPEGTURBO_URL | tar xz

  echo "-----> Building jpegturbo"
  cd $JPEGTURBO_DIR
  ./configure --prefix=$INSTALL_DIR NASM=$INSTALL_DIR/bin/nasm --disable-static
  make && make install
  cd ..
  rm -rf $LIBWEBP_DIR

  # install libwebp

  LIBWEBP_VERSION="1.0.0"
  LIBWEBP_FILE="libwebp-$LIBWEBP_VERSION.tar.gz"
  LIBWEBP_DIR="libwebp-$LIBWEBP_VERSION"
  LIBWEBP_URL="http://downloads.webmproject.org/releases/webp/$LIBWEBP_FILE"

  echo "-----> Downloading libwebp from $LIBWEBP_URL"
  curl -L --silent $LIBWEBP_URL | tar xz

  echo "-----> Building libwebp"
  cd $LIBWEBP_DIR
  ./configure --prefix=$INSTALL_DIR --disable-static
  make && make install
  cd ..
  rm -rf $LIBWEBP_DIR

  # install imagemagick

  IMAGE_MAGICK_VERSION="${IMAGE_MAGICK_VERSION:-6.9.3-10}"
  IMAGE_MAGICK_FILE="ImageMagick-$IMAGE_MAGICK_VERSION.tar.xz"
  IMAGE_MAGICK_DIR="ImageMagick-$IMAGE_MAGICK_VERSION"
  # SSL cert used on imagemagick not recognized by heroku.
  IMAGE_MAGICK_URL="http://www.imagemagick.org/download/releases/$IMAGE_MAGICK_FILE"

  echo "-----> Downloading ImageMagick from $IMAGE_MAGICK_URL"
  #wget $IMAGE_MAGICK_URL -P $BUILD_DIR
  wget $IMAGE_MAGICK_URL

  echo "-----> Extracting ImageMagick from $BUILD_DIR/$IMAGE_MAGICK_FILE"
  if [ ! -f $IMAGE_MAGICK_FILE ]; then
    echo "Error: Unable to download image magick"
    ls
    exit 1;
  fi
  tar xvf $IMAGE_MAGICK_FILE

  echo "-----> Building ImageMagick"
  cd $IMAGE_MAGICK_DIR
  export CPPFLAGS="-I$INSTALL_DIR/include"
  export LDFLAGS="-L$INSTALL_DIR/lib"
  ./configure --prefix=$INSTALL_DIR --with-webp --with-quantum-depth=8 --disable-static
  make && make install
  cd ..
  rm -rf $IMAGE_MAGICK_DIR


  # cache for future deploys

  echo "-----> Caching ImageMagick and libwebp installation"
  cd $VENDOR_DIR
  REL_INSTALL_DIR="imagemagick-webp"
  tar czf $REL_INSTALL_DIR.tar.xz $REL_INSTALL_DIR
  mv $REL_INSTALL_DIR.tar.xz $CACHE_FILE

else

  # cache exists, extract it

  echo "-----> Extracting ImageMagick and libwebp $CACHE_FILE => $VENDOR_DIR"
  tar xzf $CACHE_FILE -C $VENDOR_DIR
fi

# update PATH and LD_LIBRARY_PATH

echo "-----> Updating environment variables"

export C_FLAGS="-I$INSTALL_DIR/include -L$INSTALL_DIR/lib -E -v --trace"
echo $C_FLAGS
echo $BUILD_DIR

ls /app

PROFILE_PATH="/app/.profile.d/imagemagick-webp.sh"
ACTUAL_INSTALL_PATH="$HOME/vendor/imagemagick-webp"
mkdir -p $(dirname $PROFILE_PATH)
echo "export C_FLAGS=\"-I$INSTALL_DIR/include -L$INSTALL_DIR/lib -E -v --trace\"" >> $PROFILE_PATH
echo "export CPATH=$CPATH:$ACTUAL_INSTALL_PATH/include:$INSTALL_DIR/include" >> $PROFILE_PATH
echo "export PATH=$ACTUAL_INSTALL_PATH/bin:\$PATH" >> $PROFILE_PATH
echo "export LD_LIBRARY_PATH=$ACTUAL_INSTALL_PATH/lib:\$LD_LIBRARY_PATH" >> $PROFILE_PATH

cat $PROFILE_PATH
